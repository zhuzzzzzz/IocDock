##########
IocManager
##########



使用说明
------------------------------------------------------------------------
(1) 使用命令 "./IocManager.py create" 创建IOC项目, 设置IOC的字段属性, 通用的IOC属性与其对应的作用描述如下:
	
	[IOC] ------------------------- 所有创建的IOC默认具有此section, 用以存储IOC的通用配置信息
	name -------------------------- IOC项目的名称
	bin --------------------------- IOC将使用的容器中的哪个可执行IOC
	module ------------------------ 支持的自动安装模块, 目前有四个: autosave, caputlog, status-ioc, status-os
	container --------------------- IOC项目将在哪个容器中运行
	host -------------------------- IOC项目将在哪个主机中运行
	status ------------------------ IOC的配置状态, 分别有两种: ready(IOC项目已生成运行文件，可导入至容器中运行), unready(IOC项目未生成运行文件)
	description ------------------- IOC的描述信息
	
	[DB] -------------------------- 所有创建的IOC默认具有此section, 用以存储IOC加载的db文件信息
	file -------------------------- db文件列表
	load_* ------------------------ 设置加载db文件用到的宏替换, 格式: *.db, A=abc, B=def
	load_* ------------------------ 设置不使用宏替换加载db文件, 格式: *.db

(2) IOC项目管理.
	
	- 使用命令 "./IocManager.py set" 进行IOC项目的属性设置.
	- 使用命令 "./IocManager.py list" 查找IOC项目.
	- 使用命令 "./IocManager.py remove" 删除IOC项目.

(3) 设置IOC的配置属性(ioc.ini文件), 并向IOC项目的src目录内添加源文件(db文件, 协议文件等).
	
	1. 将源文件复制至目标IOC的src目录， 或使用命令 "./IocManager.py exec -s --src-path" 从指定目录添加源文件.
	2. 设置IOC属性配置文件内的[DB]项, 按格式设置load_*, 设置对应IOC启动时需要加载的db文件及宏替换.


(4) 使用命令 "./IocManager.py exec -g" 根据已设置的各项属性自动生成IOC运行文件.

(5) 使用命令 "./IocManager.py exec -o" 将已配置好的IOC文件夹按目录结构导出.

(6) 使用IOC标准执行容器启动, mount已导出的需要运行的IOC项目目录, 作为容器与主机的共享目录:

	docker run -it -v /home/zhu/docker/repository/ioc-for-docker/localhost/test:/opt/EPICS/RUN/test runtime:dev
	
	*) runtime:dev为标准的IOC执行容器镜像.
	*) 此处-v src:dest, 将"exec -o"命令导出的test目录作为共享目录mount容器的运行目录RUN之中.

(7) 使用命令定期备份IOC的运行目录.




更新日志及功能说明
------------------------------------------------------------------------

tag v1.0
=======
>>>>>>>> 20240104 <<<<<<<< 
1. 项目结构优化, 添加了src目录用以存放IOC项目的源文件
2. 属性文件备份优化, 现在直接比对属性文件的内容而非读取系统的文件修改时间来判断文件是否被修改
3. 添加ASYN, StreamDevice模块的配置文件支持
4. 开放了直接操作st.cmd文件的权限以及项目文件的复制权限, 可兼容其他不常见的模块
5. IOC项目文件及属性配置文件的检查功能
6. 其他各项改进
7. 增加了自动测试脚本


















